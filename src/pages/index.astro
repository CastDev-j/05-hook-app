---
import CardComponent from "@/components/CardComponent.astro";
import Layout from "../layouts/Layout.astro";
import { UseState, CustomHook, FormCustomHook } from "@/components/hooks";
import { UseEffect } from "@/components/hooks/UseEffect";

const title = "Hooks React | Inicio";

const hooks: any = {
  useState: {
    title: "useState",
    subtitle:
      "Hook que te permite agregar estado a tus componentes funcionales.",
    description:
      "useState es un Hook que te permite tener variables de estado en componentes funcionales. Devuelve un array con dos elementos. El primer elemento es el valor actual del estado, y el segundo elemento es una función que te permite actualizarlo.",
    color: {
      decoration: "bg-blue-200",
      border: "border-blue-300",
      background: "bg-blue-400",
    },
  },
  customHook: {
    title: "Custom Hook",
    subtitle:
      "Un Hook personalizado es una función de JavaScript que comienza con 'use' y puede llamar a otros Hooks.",
    description:
      "Los Hooks personalizados te permiten reutilizar lógica con estado en varios componentes. Normalmente se crean para extraer lógica reutilizable de los componentes en funciones separadas. Por ejemplo, 'useFriendStatus' es un Hook personalizado que rastrea si un amigo está en línea o no.",
    color: {
      decoration: "bg-rose-200",
      border: "border-rose-300",
      background: "bg-rose-400",
    },
  },
  useEffect: {
    title: "useEffect",
    subtitle:
      "El Hook de Efecto te permite realizar efectos secundarios en componentes funcionales.",
    description:
      "Al usar este Hook, le dices a React que tu componente necesita hacer algo después de renderizar. React recordará la función que pasaste y la llamará después de realizar las actualizaciones del DOM.",
    color: {
      decoration: "bg-violet-200",
      border: "border-violet-300",
      background: "bg-violet-400",
    },
  },
  formCustomHook:{
      title: "Form Custom Hook",
      subtitle: "Formulario con un custom hook",
      description: "Este formulario utiliza un custom hook para mejorar la legibilidad y reutilización del componente.",
      color: {
        decoration: "bg-teal-200",
        border: "border-teal-300",
        background: "bg-teal-400",
      },

    }
};

const { useState, customHook, useEffect, formCustomHook} = hooks;
---

<Layout {title}>
  <main
  class="grid grid-cols-1 md:grid-cols-2 gap-4 fade-up w-full p-6"
  style="grid-auto-rows: auto;"
>

    <CardComponent
      title={useState.title}
      subtitle={useState.subtitle}
      description={useState.description}
      color={useState.color}
    >
      <UseState client:load />
    </CardComponent>

    <CardComponent
      title={customHook.title}
      subtitle={customHook.subtitle}
      description={customHook.description}
      color={customHook.color}
    >
      <CustomHook initialState={0} client:load />
    </CardComponent>

    <CardComponent
      title={useEffect.title}
      subtitle={useEffect.subtitle}
      description={useEffect.description}
      color={useEffect.color}
    >
    <UseEffect client:load />
    </CardComponent>

    <CardComponent
      title={formCustomHook.title}
      subtitle={formCustomHook.subtitle}
      description={formCustomHook.description}
      color={formCustomHook.color}
    >
      <FormCustomHook client:load />
    </CardComponent>
  </main>
</Layout>
