---
import CardComponent from "@/components/CardComponent.astro";
import Layout from "../layouts/Layout.astro";
import {
  UseState,
  CustomHook,
  FormCustomHook,
  MultipleCustomHooks,
  UseRef,
  UseLayoutEffect,
  Memorize,
  MemoHook,
  CallBackHook,
  UseReducer,
  
} from "@/components/hooks";
import { UseEffect } from "@/components/hooks/UseEffect";
import { MainApp } from "@/components/hooks2/09-useContext/MainApp";

const title = "Hooks React | Inicio";

const hooks: any = {
  useState: {
    title: "useState",
    subtitle:
      "Hook que te permite agregar estado a tus componentes funcionales.",
    description:
      "useState es un Hook que te permite tener variables de estado en componentes funcionales. Devuelve un array con dos elementos. El primer elemento es el valor actual del estado, y el segundo elemento es una función que te permite actualizarlo.",
    color: {
      decoration: "bg-blue-200",
      border: "border-blue-300",
      background: "bg-blue-400",
    },
  },
  customHook: {
    title: "Custom Hook",
    subtitle:
      "Un Hook personalizado es una función de JavaScript que comienza con 'use' y puede llamar a otros Hooks.",
    description:
      "Los Hooks personalizados te permiten reutilizar lógica con estado en varios componentes. Normalmente se crean para extraer lógica reutilizable de los componentes en funciones separadas. Por ejemplo, 'useFriendStatus' es un Hook personalizado que rastrea si un amigo está en línea o no.",
    color: {
      decoration: "bg-rose-200",
      border: "border-rose-300",
      background: "bg-rose-400",
    },
  },
  useEffect: {
    title: "useEffect",
    subtitle:
      "El Hook de Efecto te permite realizar efectos secundarios en componentes funcionales.",
    description:
      "Al usar este Hook, le dices a React que tu componente necesita hacer algo después de renderizar. React recordará la función que pasaste y la llamará después de realizar las actualizaciones del DOM.",
    color: {
      decoration: "bg-violet-200",
      border: "border-violet-300",
      background: "bg-violet-400",
    },
  },
  formCustomHook: {
    title: "Form Custom Hook",
    subtitle: "Formulario con un custom hook",
    description:
      "Este formulario utiliza un custom hook para mejorar la legibilidad y reutilización del componente.",
    color: {
      decoration: "bg-teal-200",
      border: "border-teal-300",
      background: "bg-teal-400",
    },
  },
  multipleCustomHooks: {
    title: "Multiple Custom Hooks",
    subtitle: "Ejemplo de uso de multiples custom hooks en un solo componente",
    description:
      "Este componente utiliza multiples custom hooks para mejorar la legibilidad y reutilización del componente.",
    color: {
      decoration: "bg-pink-200",
      border: "border-pink-300",
      background: "bg-pink-400",
    },
  },
  useRef: {
    title: "useRef",
    subtitle: "Hook que te permite acceder al DOM de un elemento.",
    description:
      "useRef devuelve un objeto mutable cuya propiedad current se inicializa con el argumento pasado (initialValue). El objeto devuelto persistirá durante todo el ciclo de vida del componente.",
    color: {
      decoration: "bg-orange-200",
      border: "border-orange-300",
      background: "bg-orange-400",
    },
  },
  useLayoutEffect: {
    title: "useLayoutEffect",
    subtitle:
      "Hook que te permite realizar efectos secundarios en componentes funcionales.",
    description:
      "useLayoutEffect es similar a useEffect, pero se ejecuta sincrónicamente después de todas las mutaciones del DOM. Se usa para leer el layout del DOM y sincronizarlo antes de que se pinte la pantalla.",
    color: {
      decoration: "bg-green-200",
      border: "border-green-300",
      background: "bg-green-400",
    },
  },
  memorize: {
    title: "useMemo",
    subtitle: "Hook que te permite memorizar un valor.",
    description:
      "useMemo te permite memorizar un valor y solo lo recalcula cuando una de las dependencias ha cambiado. Es útil para optimizar el rendimiento de tus componentes.",
    color: {
      decoration: "bg-yellow-200",
      border: "border-yellow-300",
      background: "bg-yellow-400",
    },

  },
  memoHook: {
    title: "memo",
    subtitle: "Hook que te permite memorizar un componente.",
    description:
      "memo es un componente de orden superior que memoriza un componente y solo lo renderiza si sus props han cambiado. Es útil para optimizar el rendimiento de tus componentes.",
    color: {
      decoration: "bg-indigo-200",
      border: "border-indigo-300",
      background: "bg-indigo-400",
    },
  },
  callBackHook:{
    title: "useCallback",
    subtitle: "Hook que te permite memorizar una función.",
    description:
      "useCallback te permite memorizar una función y solo la recalcula cuando una de las dependencias ha cambiado. Es útil para optimizar el rendimiento de tus componentes.",
    color: {
      decoration: "bg-red-200",
      border: "border-red-300",
      background: "bg-red-400",
    },
  },
  reducer:{
    title: "useReducer",
    subtitle: "Hook que te permite manejar estados complejos.",
    description:
      "useReducer es una alternativa a useState. Es útil cuando tienes estados complejos que requieren lógica adicional.",
    color: {
      decoration: "bg-purple-200",
      border: "border-purple-300",
      background: "bg-purple-400",
    },
  },
  mainApp:{
    title: "Test de aplicacion",
    subtitle: "Este test utilizara context y reducer",
    description:
      "useReducer es una alternativa a useState. Es útil cuando tienes estados complejos que requieren lógica adicional.",
    color: {
      decoration: "bg-blue-200",
      border: "border-blue-300",
      background: "bg-blue-400",
    },
  }
};

const {
  useState,
  customHook,
  useEffect,
  formCustomHook,
  multipleCustomHooks,
  useRef,
  useLayoutEffect,
  memorize,
  memoHook,
  callBackHook,
  reducer,
  mainApp
} = hooks;
---

<Layout {title}>
  <main
    class="grid grid-cols-1 md:grid-cols-2 gap-4 fade-up w-full p-6"
    style="grid-auto-rows: auto;"
  >
    <CardComponent
      title={useState.title}
      subtitle={useState.subtitle}
      description={useState.description}
      color={useState.color}
    >
      <UseState client:load />
    </CardComponent>

    <CardComponent
      title={customHook.title}
      subtitle={customHook.subtitle}
      description={customHook.description}
      color={customHook.color}
    >
      <CustomHook initialState={0} client:load />
    </CardComponent>

    <CardComponent
      title={useEffect.title}
      subtitle={useEffect.subtitle}
      description={useEffect.description}
      color={useEffect.color}
    >
      <UseEffect client:load />
    </CardComponent>

    <CardComponent
      title={formCustomHook.title}
      subtitle={formCustomHook.subtitle}
      description={formCustomHook.description}
      color={formCustomHook.color}
    >
      <FormCustomHook client:load />
    </CardComponent>

    <CardComponent
      title={multipleCustomHooks.title}
      subtitle={multipleCustomHooks.subtitle}
      description={multipleCustomHooks.description}
      color={multipleCustomHooks.color}
    >
      <MultipleCustomHooks client:load />
    </CardComponent>

    <CardComponent
      title={useRef.title}
      subtitle={useRef.subtitle}
      description={useRef.description}
      color={useRef.color}
    >
      <UseRef client:load />
    </CardComponent>
    
    <CardComponent
      title={useLayoutEffect.title}
      subtitle={useLayoutEffect.subtitle}
      description={useLayoutEffect.description}
      color={useLayoutEffect.color}
    >
      <UseLayoutEffect client:load />
    </CardComponent>

    <CardComponent
      title={memorize.title}
      subtitle={memorize.subtitle}
      description={memorize.description}
      color={memorize.color}
    >
      <Memorize client:load />
    </CardComponent>

    <CardComponent
      title={memoHook.title}
      subtitle={memoHook.subtitle}
      description={memoHook.description}
      color={memoHook.color}
    >
      <MemoHook client:load />
    </CardComponent>

    <CardComponent
      title={callBackHook.title}
      subtitle={callBackHook.subtitle}
      description={callBackHook.description}
      color={callBackHook.color}
    >
      <CallBackHook client:load />
    </CardComponent>


    <CardComponent
      title={reducer.title}
      subtitle={reducer.subtitle}
      description={reducer.description}
      color={reducer.color}
    >
      <UseReducer client:load />
    </CardComponent>

    <CardComponent
      title={mainApp.title}
      subtitle={mainApp.subtitle}
      description={mainApp.description}
      color={mainApp.color}
    >
      <MainApp client:load />
    </CardComponent>



  </main>
</Layout>
